package com.example.doxoso.service;

import com.example.doxoso.model.PlayerTongTienDanhTheoMienDto;
import com.example.doxoso.model.SoNguoiChoi;
import com.example.doxoso.repository.SoNguoiChoiRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.text.Normalizer;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class TongTienDanhTheoMienService {

    private final SoNguoiChoiRepository soNguoiChoiRepository;

    // Lo·∫°i tr·ª´ c√°c c√°ch ƒë√°nh n√†y
    private static final Set<String> EXCLUDED = Set.of("LON", "NHO", "LON NHO");

    /** ------------ T√çNH CHO 1 PLAYER (TR·∫¢ V·ªÄ DTO) ------------ */
    public PlayerTongTienDanhTheoMienDto tinhTongTheoMien(Long playerId) {
        // fetch theo player.id
        List<SoNguoiChoi> ds = soNguoiChoiRepository.findByPlayer_Id(playerId);

        CalcResult calc = tinhTuDanhSachSo(ds);

        return PlayerTongTienDanhTheoMienDto.builder()
                .playerId(playerId)
                .playerName(calc.playerName)
                .mienBac(calc.mapTheoMien.getOrDefault("MIEN BAC", BigDecimal.ZERO))
                .mienTrung(calc.mapTheoMien.getOrDefault("MIEN TRUNG", BigDecimal.ZERO))
                .mienNam(calc.mapTheoMien.getOrDefault("MIEN NAM", BigDecimal.ZERO))
                .tong(calc.mapTheoMien.getOrDefault("TONG", BigDecimal.ZERO))
                .build();
    }

    /** ------------ T√çNH CHO T·∫§T C·∫¢ PLAYER (LIST DTO) ------------ */
    public List<PlayerTongTienDanhTheoMienDto> tinhTatCaPlayer() {
        // d√πng fetch join ƒë·ªÉ tr√°nh N+1 (h√£y d√πng findAllWithPlayer trong repository)
        List<SoNguoiChoi> all = soNguoiChoiRepository.findAllWithPlayer();

        // group theo player.id (null-safe)
        Map<Long, List<SoNguoiChoi>> byPlayer = all.stream()
                .filter(s -> s.getPlayer() != null && s.getPlayer().getId() != null)
                .collect(Collectors.groupingBy(s -> s.getPlayer().getId()));

        List<PlayerTongTienDanhTheoMienDto> result = new ArrayList<>();

        for (Map.Entry<Long, List<SoNguoiChoi>> e : byPlayer.entrySet()) {
            Long pid = e.getKey();
            CalcResult calc = tinhTuDanhSachSo(e.getValue());

            result.add(PlayerTongTienDanhTheoMienDto.builder()
                    .playerId(pid)
                    .playerName(calc.playerName) // c√≥ th·ªÉ null n·∫øu Player kh√¥ng c√≥ name
                    .mienBac(calc.mapTheoMien.getOrDefault("MIEN BAC", BigDecimal.ZERO))
                    .mienTrung(calc.mapTheoMien.getOrDefault("MIEN TRUNG", BigDecimal.ZERO))
                    .mienNam(calc.mapTheoMien.getOrDefault("MIEN NAM", BigDecimal.ZERO))
                    .tong(calc.mapTheoMien.getOrDefault("TONG", BigDecimal.ZERO))
                    .build());
        }

        // (tu·ª≥ ch·ªçn) s·∫Øp x·∫øp theo t·ªïng gi·∫£m d·∫ßn
        result.sort(Comparator.comparing(PlayerTongTienDanhTheoMienDto::getTong).reversed());
        return result;
    }

    /** T√≠nh t·ª´ 1 danh s√°ch SoNguoiChoi c·ªßa c√πng player */
    private CalcResult tinhTuDanhSachSo(List<SoNguoiChoi> danhSach) {
        Map<String, BigDecimal> byRegion = new LinkedHashMap<>();
        byRegion.put("MIEN BAC", BigDecimal.ZERO);
        byRegion.put("MIEN TRUNG", BigDecimal.ZERO);
        byRegion.put("MIEN NAM", BigDecimal.ZERO);

        BigDecimal grandTotal = BigDecimal.ZERO;
        String playerName = null;

        for (SoNguoiChoi so : danhSach) {
            // l·∫•y t√™n player n·∫øu c√≥ (∆∞u ti√™n getter chu·∫©n)
            if (playerName == null && so.getPlayer() != null) {
                try {
                    // ƒê·ªïi "getName" n·∫øu entity Player d√πng field kh√°c (vd: getUsername)
                    Object n = so.getPlayer().getClass().getMethod("getName").invoke(so.getPlayer());
                    if (n != null) playerName = String.valueOf(n);
                } catch (ReflectiveOperationException ignored) {}
            }

            String cachDanh = norm(so.getCachDanh());
            if (EXCLUDED.contains(cachDanh)) continue; // b·ªè L·ªöN/NH·ªé/L·ªöN NH·ªé

            String mien = normMien(so.getMien());
            BigDecimal tien = parseTienDanh(so.getTienDanh());

            // N·∫øu mu·ªën nh√¢n theo s·ªë ƒë√†i ng∆∞·ªùi ch∆°i ch·ªçn, b·∫≠t ƒëo·∫°n d∆∞·ªõi:
            // if (so.getTenDai() != null && so.getTenDai().contains(",")) {
            //     long soDai = Arrays.stream(so.getTenDai().split(","))
            //             .map(String::trim).filter(s -> !s.isEmpty()).count();
            //     tien = tien.multiply(BigDecimal.valueOf(soDai));
            // }

            if (byRegion.containsKey(mien)) {
                byRegion.put(mien, byRegion.get(mien).add(tien));
            } else {
                // n·∫øu mi·ªÅn kh√¥ng kh·ªõp 3 nh√≥m ch√≠nh, v·∫´n c·ªông d·ªìn theo key th√¥
                byRegion.put(mien, tien);
            }
            grandTotal = grandTotal.add(tien);
        }

        byRegion.put("TONG", grandTotal);
        return new CalcResult(playerName, byRegion);
    }


    /** üëâ T√≠nh t·ªïng ti·ªÅn theo *t·ª´ng ng√†y* cho 1 player trong kho·∫£ng [from, to] */
    @Transactional
    public List<PlayerTongTienDanhTheoMienDto> tinhTongTheoMienTheoNgay(Long playerId, LocalDate from, LocalDate to) {
        // L·∫•y to√†n b·ªô v√© c·ªßa player trong kho·∫£ng ng√†y
        List<SoNguoiChoi> all = soNguoiChoiRepository.findByPlayer_IdAndNgayBetween(playerId, from, to);

        // Group theo ng√†y
        Map<LocalDate, List<SoNguoiChoi>> byDate = all.stream()
                .collect(Collectors.groupingBy(SoNguoiChoi::getNgay, TreeMap::new, Collectors.toList()));

        List<PlayerTongTienDanhTheoMienDto> result = new ArrayList<>();

        // T√°i s·ª≠ d·ª•ng logic c·ªông ti·ªÅn hi·ªán c√≥ (tinhTuDanhSachSo)
        for (Map.Entry<LocalDate, List<SoNguoiChoi>> e : byDate.entrySet()) {
            LocalDate ngay = e.getKey();
            var calc = tinhTuDanhSachSo(e.getValue()); // tr·∫£ {playerName, map "MIEN ..."}

            result.add(PlayerTongTienDanhTheoMienDto.builder()
                    .playerId(playerId)
                    .playerName(calc.playerName)
                    .ngay(ngay)
                    .mienBac(calc.mapTheoMien.getOrDefault("MIEN BAC", BigDecimal.ZERO))
                    .mienTrung(calc.mapTheoMien.getOrDefault("MIEN TRUNG", BigDecimal.ZERO))
                    .mienNam(calc.mapTheoMien.getOrDefault("MIEN NAM", BigDecimal.ZERO))
                    .tong(calc.mapTheoMien.getOrDefault("TONG", BigDecimal.ZERO))
                    .build());
        }
        return result; // ƒë√£ theo th·ª© t·ª± ng√†y tƒÉng d·∫ßn nh·ªù TreeMap
    }

    // ===== Helpers =====

    private static String norm(String s) {
        if (s == null) return "";
        String noDia = Normalizer.normalize(s, Normalizer.Form.NFD)
                .replaceAll("\\p{M}+", "");
        String upper = noDia.toUpperCase(Locale.ROOT).trim();
        return upper.replaceAll("\\s+", " ");
    }

    private static String normMien(String s) {
        String n = norm(s);
        if (n.contains("BAC")) return "MIEN BAC";
        if (n.contains("TRUNG")) return "MIEN TRUNG";
        if (n.contains("NAM")) return "MIEN NAM";
        return n; // fallback
    }

    private static BigDecimal parseTienDanh(String s) {
        if (s == null || s.isBlank()) return BigDecimal.ZERO;
        String cleaned = s.replace(",", "").trim(); // b·ªè d·∫•u ph√¢n c√°ch ngh√¨n n·∫øu c√≥

        if (cleaned.contains("-")) {
            BigDecimal sum = BigDecimal.ZERO;
            for (String part : cleaned.split("-")) {
                if (!part.isBlank()) sum = sum.add(new BigDecimal(part.trim()));
            }
            return sum;
        }
        return new BigDecimal(cleaned);
    }

    private record CalcResult(String playerName, Map<String, BigDecimal> mapTheoMien) {}
}
